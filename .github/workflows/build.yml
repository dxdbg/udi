name: build

on:
  push:
    branches:
      - main

env:
  NFT_VERSION: v0.1.6

jobs:
  build-linux-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: swatinem/rust-cache@v2
      - name: Install extra packages
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew update
            brew install scons automake
            echo "NFT_PLATFORM_NAME=macos" >> "$GITHUB_ENV"
          fi
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y scons
            echo "NFT_PLATFORM_NAME=linux" >> "$GITHUB_ENV"
          fi
      - name: Set up dependencies workspace
        run: |
          mkdir -p deps/install deps/work
          echo "UDI_DEPS=$GITHUB_WORKSPACE/deps/install" >> "$GITHUB_ENV"
      - name: Build udis86
        working-directory: deps/work
        run: |
          git clone --depth=1 https://github.com/BlueArc0/udis86.git
          cd udis86
          git checkout d95a9d1
          ./autogen.sh
          export CFLAGS=-fPIC
          ./configure --prefix="$UDI_DEPS" --with-python=python3 --disable-shared --enable-static
          make install
      - name: Build libcbor
        working-directory: deps/work
        run: |
          mkdir libcbor && cd libcbor
          curl -OL https://github.com/PJK/libcbor/archive/refs/tags/v0.10.2.zip
          unzip v0.10.2.zip
          cd libcbor-0.10.2
          export CFLAGS=-fPIC
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$UDI_DEPS" -DBUILD_SHARED_LIBS=OFF .
          make
          make install
      - name: Build libudirt
        working-directory: libudirt
        run: |
          scons configure CBOR_INC="$UDI_DEPS/include" CBOR_LIB="$UDI_DEPS/lib" UDIS86_INC="$UDI_DEPS/include" UDIS86_LIB="$UDI_DEPS/lib"
          scons all_tests
      - name: Build libudi
        working-directory: libudi
        run: |
          cargo fmt --check
          cargo clippy
          curl -sSfL -o native-file-tests.zip "https://github.com/dxdbg/native-file-tests/releases/download/$NFT_VERSION/native-file-tests-$NFT_PLATFORM_NAME-$NFT_VERSION.zip"
          unzip -j native-file-tests.zip -d native-file-tests
          cargo test
      - name: Build libudi-c
        working-directory: libudi-c
        run: |
          cargo fmt --check
          cargo clippy
          cargo test