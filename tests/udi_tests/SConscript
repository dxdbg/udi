#
# SConscript for udi_tests
#

import udibuild
import os

Import('topenv')

bin_env = topenv.Clone()

bin_env.Append(CPPPATH=['#/libudirt', '#/tests/libuditest', '#/libudi'])

# create header with information about binaries used in tests

def build_binary_header(target, source, env):
    bin_dir = env.Dir('#/build/tests/bin/').abspath + os.sep
    
    for t in target:
        target_file = open(str(t), "w")

        # create the first part of the header
        target_file.write("#ifndef __TEST_BINS_H__\n")
        target_file.write("#define __TEST_BINS_H__\n")

        # paths to binaries

        target_file.write("#define SIMPLE_BINARY_PATH \"{0}\"\n".format(bin_dir + 'simple'))

        # symbol addresses

        target_file.write("#define SIMPLE_FUNCTION1 0x{0}\n".format(udibuild.GetSymbolAddress(bin_dir + 'simple', 'function1')))

        # create the trailing part of the header
        target_file.write("#endif\n")

        target_file.close()

bin_h_builder = Builder(action = build_binary_header)

bin_env.Append(BUILDERS = {'BinaryHeaderBuilder' : bin_h_builder})

# define sources

sources = bin_env.Glob('*.cxx', source=True, strings=True)

bins = dict()

bin_env.Append(CPPPATH = ['#/build/tests/udi_tests'])

for source in sources:
    bins[udibuild.GetFilename(source)] = bin_env.Object(source)

libs = ['udi', 'uditest']

libpath = [ '#/build/libudi', '#/build/tests/libuditest' ]

for binary,source in bins.items():
    bin_env.Program(binary, source, LIBS=libs, LIBPATH=libpath)

bin_env.Program('all_libudi_tests', bins.values(), LIBS=libs, LIBPATH=libpath)

test_bins_h = bin_env.BinaryHeaderBuilder('test_bins.h', sources)

bin_env.Depends(test_bins_h, '#/build/tests/bin')

bin_env.Depends(bins.values(), test_bins_h)
