#
# SConscript for udi_tests
#

import udibuild
import os

Import('topenv')

bin_env = topenv.Clone()

bin_env.Append(CPPPATH=['#/libudirt', '#/tests/libuditest', '#/libudi'])

# create header with information about binaries used in tests

def build_binary_header(target, source, env):
    bin_dir = env.Dir('#/build/tests/bin/').abspath + os.sep
    
    for t in target:
        target_file = open(str(t), "w")

        # create the first part of the header
        target_file.write("#ifndef __TEST_BINS_H__\n")
        target_file.write("#define __TEST_BINS_H__\n")

        # paths to binaries
        target_file.write("#define SIMPLE_BINARY_PATH \"{0}\"\n".format(bin_dir + 'simple'))
        target_file.write("#define THREAD_BINARY_PATH \"{0}\"\n".format(bin_dir + 'waitthread'))

        # symbol addresses
        target_file.write("#define SIMPLE_FUNCTION1 0x{0}\n".format(udibuild.GetSymbolAddress(bin_dir + 'simple', 'function1')))
        target_file.write("#define THREAD_BREAK_FUNC 0x{0}\n".format(udibuild.GetSymbolAddress(bin_dir + 'waitthread', 'breakpoint_func')))
        target_file.write("#define SIMPLE_FUNCTION2 0x{0}\n".format(udibuild.GetSymbolAddress(bin_dir + 'simple', 'function2')))

        # symbol lengths
        target_file.write("#define SIMPLE_FUNCTION2_LENGTH {0}\n".format(udibuild.GetSymbolLength(bin_dir + 'simple', 'function2')))

        # instruction lengths
        target_file.write("#define SIMPLE_FUNCTION1_INST_LENGTH {0}\n".format(udibuild.GetInstructionLength(bin_dir + 'simple', 'function1')))
        target_file.write("#define THREAD_BREAK_FUNC_INST_LENGTH 0x{0}\n".format(udibuild.GetInstructionLength(bin_dir + 'waitthread', 'breakpoint_func')))

        # create the trailing part of the header
        target_file.write("#endif\n")

        target_file.close()

bin_h_builder = Builder(action = build_binary_header)

bin_env.Append(BUILDERS = {'BinaryHeaderBuilder' : bin_h_builder})

# define sources

sources = bin_env.Glob('*.cxx', source=True, strings=True)

bins = dict()

bin_env.Append(CPPPATH = ['#/build/tests/udi_tests'])

lib_file = 'test_lib.cxx'

lib_file_obj = bin_env.Object(lib_file)

lib_file_os = None

lib_file_os_obj = None

if udibuild.IsUnix():
    lib_file_os = 'test_lib_posix.cxx'

    lib_file_os_obj = bin_env.Object(lib_file_os)

for source in sources:
    if source == lib_file or source == lib_file_os:
        continue

    bins[udibuild.GetFilename(source)] = bin_env.Object(source)

lib_files = list()

lib_files.append(lib_file_obj)

if lib_file_os_obj is not None:
    lib_files.append(lib_file_os_obj)

libs = ['udi', 'uditest', 'uditestmain']

libpath = [ '#/build/libudi', '#/build/tests/libuditest' ]

for binary,source in bins.items():
    bin_env.Program(binary, [source, lib_files], LIBS=libs, LIBPATH=libpath)

bin_env.Program('all_libudi_tests', [bins.values(), lib_files], LIBS=libs, LIBPATH=libpath)

test_bins_h = bin_env.BinaryHeaderBuilder('test_bins.h', sources)

bin_env.Depends(test_bins_h, '#/build/tests/bin')

bin_env.Depends(bins.values(), test_bins_h)

# vim: ft=python
