#
# SConscript file for udirt tests
#

import udibuild

Import('topenv')

bin_env = topenv.Clone()

bin_env.Append(CPPPATH = ['#/src'])
bin_env.Append(LIBPATH = ['#/build/src'])
bin_env.Append(RPATH = [Dir('#/build/src').abspath])


libs = [ 'udirt', 'cbor' ]

if udibuild.IsX86():
    libs.append('udis86')

mock_lib_obj = bin_env.Object('mock-lib.c')

mock_lib_obj_sys = None
if udibuild.IsUnix():
    mock_lib_obj_sys = bin_env.Object('mock-lib-unix.c')
else:
    mock_lib_obj_sys = bin_env.Object('mock-lib-win.c')

read_test_req_srcs = [
    'read-test-req.c',
    mock_lib_obj
]

read_test_req_bin = bin_env.Program('read-test-req', read_test_req_srcs, LIBS=libs)
bin_env.Depends(read_test_req_bin, '#/src/udirt-msg.c')
bin_env.Depends(read_test_req_bin, '#/src/udirt-malloc.c')

udi_log_srcs = [
    'udi-log.c',
    mock_lib_obj
]

udi_log_bin = bin_env.Program('udi-log', udi_log_srcs, LIBS=libs)
bin_env.Depends(udi_log_bin, '#/src/udirt.c')

tests = [
    read_test_req_bin,
    udi_log_bin
]

for test in tests:
    bin_env.AlwaysBuild(bin_env.Alias("test-" + str(test[0]), test, test[0].abspath))

bin_env.AlwaysBuild(bin_env.Alias("all_tests", tests, " && ".join(map(lambda x: x[0].abspath, tests))))

# vim: ft=python
