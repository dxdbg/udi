#
# Top level SConscript file for udi projects
#

import sys
import os

# import utility functionality
sys.path.append(os.path.abspath('udibuild'))
import udibuild

vars = Variables(['.udirt.config'])
vars.Add("UDIS86_INC", "Include directory for udis86 library")
vars.Add("UDIS86_LIB", "Library directory for udis86 library")
vars.Add("CBOR_INC", "Include directory cbor library")
vars.Add("CBOR_LIB", "Library directory cbor library")
vars.Add("MSVC_USE_SCRIPT", "MSVC_USE_SCRIPT value to pass to the SCons environment")
vars.Add("MSVC_VERSION", "MSVC_VERSION value to pass to the SCons environment")
vars.Add("OPT", "Set to True to enable optimization", False)

topenv = Environment(variables = vars, ENV = { 'PATH' : os.environ['PATH'] })

Help(vars.GenerateHelpText(topenv))

if not udibuild.IsUnix():
    topenv['CC'] = 'clang-cl'

    topenv['LIBPREFIX'] = ''
    topenv['LIBSUFFIX'] = '.lib'


if topenv['CC'] == 'gcc':
    # C compiler flags
    topenv.Append(CFLAGS = "-Wall -Werror -fPIC -std=gnu99 -g")

    if "OPT" in topenv and topenv["OPT"]:
        topenv.Append(CFLAGS = "-O2")

    if udibuild.IsDarwin():
        topenv.Append(LINKFLAGS = "-flat_namespace -undefined dynamic_lookup")
        topenv.Append(CFLAGS = "-Wno-deprecated-declarations")

elif topenv['CC'] == 'clang-cl' or topenv['CC'] == 'cl':
    topenv.Append(CFLAGS = "/W4 /WX /MD")

    if "OPT" in topenv and topenv["OPT"]:
        topenv.Append(CFLAGS = "/O2")

if "UDIS86_INC" in topenv:
    topenv.Append(CPPPATH=[topenv["UDIS86_INC"]])

if "UDIS86_LIB" in topenv:
    topenv.Append(LIBPATH=[topenv["UDIS86_LIB"]])
    topenv.Append(RPATH=[topenv["UDIS86_LIB"]])

if "CBOR_INC" in topenv:
    topenv.Append(CPPPATH=[topenv["CBOR_INC"]])

if "CBOR_LIB" in topenv:
    topenv.Append(LIBPATH=[topenv["CBOR_LIB"]])
    topenv.Append(RPATH=[topenv["CBOR_LIB"]])

# platform and architecture specific defines
if udibuild.IsUnix():
    topenv.Append(CPPDEFINES=['UNIX'])
else:
    topenv.Append(CPPDEFINES=['WINDOWS'])

if udibuild.IsLinux():
    topenv.Append(CPPDEFINES=['LINUX'])

if udibuild.IsDarwin():
    topenv.Append(CPPDEFINES=['DARWIN'])

if udibuild.IsX86():
    if udibuild.IsX86_64():
        topenv.Append(CPPDEFINES=['__WORDSIZE=64'])
    else:
        topenv.Append(CPPDEFINES=['__WORDSIZE=32'])

if 'configure' in COMMAND_LINE_TARGETS:
    conf = Configure(topenv)

    if udibuild.IsX86():
        if not conf.CheckLibWithHeader('udis86', 'udis86.h', 'c'):
            print 'Did not find libudis86'
            Exit(1)

    if not conf.CheckLibWithHeader('cbor', 'cbor.h', 'c'):
        print('Did not find libcbor')
        Exit(1)

    topenv = conf.Finish()

    vars.Save('.udirt.config', topenv)
    Exit(0)

Export('topenv')

# subdirectories
topenv.SConscript('#/src/SConscript', variant_dir='#/build/src', duplicate=False)

if udibuild.IsUnix():
    topenv.SConscript('#/tests/SConscript', variant_dir='#/build/tests', duplicate=False)
    topenv.SConscript('#/util/SConscript', variant_dir='#/build/util', duplicate=False)

# default target
topenv.Default('src', 'tests', 'util')

topenv.Clean('src', 'build')

# vim: ft=python
